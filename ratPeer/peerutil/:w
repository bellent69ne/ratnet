package peerutil

import (
	"crypto/rsa"
	"encoding/json"
	//"fmt"
	"github.com/bellent69ne/ratnet/ratp"
	"log"
)

//func GetFriends() []byte {
func DoSomething() {
	endpoint := "127.0.0.1:1366" //+ //string(ratp.PORT)
	var curSession ratp.Session
	err := curSession.Connect(endpoint)
	if err != nil {
		log.Fatal(err)
	}
	// close session when finished
	defer curSession.Conn.Close()

	// RSA key generation for session
	/*err = curSession.GenerateRSAkey()
	if err != nil {
		log.Fatal(err)
	}*/
	//////////////////////////////////////////////////////
	/*// Message hello fri3nd
	curParcel, err := ratp.NewParcel(ratp.MsgHelloFriend, nil)
	if err != nil {
		log.Fatal(err)
	}
	//////////////////////////////////////////////////////
	// Send Message hello fri3nd
	err = curSession.SendParcel(&curParcel)
	if err != nil {
		log.Fatal(err)
	}
	/////////////////////////////////////////////////////
	// Receive hello fri3nd reply with rsa public key attached
	gotParcel, err := curSession.ReceiveParcel()
	if err != nil {
		log.Fatal(err)
	}*/
	//////////////////////////////////////////////////

	// Set alien rsa public key for this session
	/*var alien rsa.PublicKey
	err = json.Unmarshal(gotParcel.Attachment, &alien)
	if err != nil {
		log.Fatal(err)
	}
	curSession.SetAlienKey(&alien)
	///////////////////////////////////////////////
	*/
	var curParcel ratp.Parcel
	var gotParcel ratp.Parcel

	if !Handshake(&curSession) {
		//return nil
		return
	}

	// Now generate aes encryption key for this session
	err = curSession.GenerateAESkey()
	if err != nil {
		log.Fatal(err)
	}
	///////////////////////////////////////////////////

	// Create Message "I have a gift" with encrypted aes key
	curParcel, err = ratp.NewParcel(ratp.MsgHaveAGift, curSession.AesKey())
	if err != nil {
		log.Fatal(err)
	}
	/////////////////////////////////////////////////////////
	// Now encrypt the Message "I have a gift" with aes key attached
	// and then send it over the network
	err = curSession.SendParcel(&curParcel)
	if err != nil {
		log.Fatal(err)
	}
	//////////////////////////////////////////////////////////

	// Receive appreciation from the ratnet server
	gotParcel, err = curSession.ReceiveParcel()
	if err != nil {
		log.Fatal(err)
	}
	////////////////////////////////////////////////

	// Now create Message "I need fri3nds"
	curParcel, err = ratp.NewParcel(ratp.MsgNeedFriends, nil)
	if err != nil {
		log.Fatal(err)
	}
	//////////////////////////////////////////////////

	// Encrypt that message and send it over the network
	err = curSession.SendParcel(&curParcel)
	if err != nil {
		log.Fatal(err)
	}
	///////////////////////////////////////////////////

	gotParcel, err = curSession.ReceiveParcel()
	if err != nil {
		log.Fatal(err)
	}
}

// Handshake - makes initial handshaking between
// two peers in the session
func Handshake(curSession *ratp.Session) bool {
	// if couldn't say "hello fri3nd"
	// nothing to do
	if !SayHelloFriend(curParcel) {
		return false
	}

	// if couldn't receive "hello fri3nd"
	if !ReceiveHelloFriend(curSession) {
		// then he can fuck off
		_ := SayFuckOFF(curSession)
		return false
	}

	return true
}

// SayHelloFriend - sends "hello fri3nd" parcel to the current session
func SayHelloFriend(curSession *ratp.Parcel) bool {
	// Message hello fri3nd
	curParcel, err := ratp.NewParcel(ratp.MsgHelloFriend, nil)
	if err != nil {
		log.Println(err)
		return false
	}
	//////////////////////////////////////////////////////
	// Send Message hello fri3nd
	err = curSession.SendParcel(&curParcel)
	if err != nil {
		log.Println(err)
		return false
	}

	return true
}

// ReceiveHelloFriend - receive parcel with "hello fri3nd" message
func ReceiveHelloFriend(curSession *ratp.Session) bool {
	// Receive parcel from the session
	// Should have "hello fri3nd" message
	// with remote peers public key attached
	gotParcel, err := curSession.ReceiveParcel()
	// if couldn't receive parcel
	if err != nil {
		// log why, exit
		log.Println(err)
		return false
	}

	// if message in received parcel is not "hello fri3nd"
	// exit
	if string(gotParcel.Message) != ratp.MsgHelloFriend {
		return false
	}

	// Decode alien rsa public key for this session
	var alien rsa.PublicKey
	err = json.Unmarshal(gotParcel.Attachment, &alien)
	if err != nil {
		log.Println(err)
		return false
	}
	// set remote peers public key
	curSession.SetAlienKey(&alien)
	return true
}

// SayFuckOFF - sends "don't understand" parcel to the session
func SayFuckOFF(curSession *ratp.Session) bool {
	// make fuckoff parcel
	justFuckOff, err := ratp.NewParcel(ratp.ErrDontUnderstand, nil)
	// if couldn't create
	if err != nil {
		// log why, exit
		log.Println(err)
		return false
	}

	// send fuckoff parcel to the session
	err = curSession.SendParcel(&justFuckOff)
	// if couldn't send fuckoff parcel
	if err != nil {
		// log why, exit
		log.Println(err)
		return false
	}

	return true
}
